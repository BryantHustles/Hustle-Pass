{
	"id": "18c01a9c26e320477fb3d66f6d0b52f0",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/HACHIWhitelist.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\ncontract HachiWhitelist {\n    bytes32 public merkleRoot;\n\n    constructor(bytes32 _merkleRoot) {\n        \n    }\n}"
			},
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":800:2577  library MerkleProof {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":800:2577  library MerkleProof {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122095540040bafbb32f5394a3280d6d74e659d18657dab602cf899a7caccfa1edc564736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122095540040bafbb32f5394a3280d6d74e659d18657dab602cf899a7caccfa1edc564736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 SLOAD STOP BLOCKHASH 0xBA 0xFB 0xB3 0x2F MSTORE8 SWAP5 LOG3 0x28 0xD PUSH14 0x74E659D18657DAB602CF899A7CAC 0xCF LOG1 0xED 0xC5 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "800:1777:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;800:1777:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122095540040bafbb32f5394a3280d6d74e659d18657dab602cf899a7caccfa1edc564736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 SLOAD STOP BLOCKHASH 0xBA 0xFB 0xB3 0x2F MSTORE8 SWAP5 LOG3 0x28 0xD PUSH14 0x74E659D18657DAB602CF899A7CAC 0xCF LOG1 0xED 0xC5 PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "800:1777:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_efficientHash(bytes32,bytes32)": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 800,
									"end": 2577,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122095540040bafbb32f5394a3280d6d74e659d18657dab602cf899a7caccfa1edc564736f6c634300080d0033",
									".code": [
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 800,
											"end": 2577,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Trees proofs. The proofs can be generated using the JavaScript library https://github.com/miguelmota/merkletreejs[merkletreejs]. Note: the hashing algorithm should be keccak256 and pair sorting should be enabled. See `test/utils/cryptography/MerkleProof.test.js` for some examples. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aa68fa19422863cc91d23b5896917dbe79175ed47b591148aaeb3e98cb49752\",\"dweb:/ipfs/QmeY64vTRbGhdXcytRKusfJsAfNF4aqr9e1SGBGdCYvW2j\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/HACHIWhitelist.sol": {
				"HachiWhitelist": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "merkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/HACHIWhitelist.sol\":129:242  contract HachiWhitelist {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/HACHIWhitelist.sol\":191:240  constructor(bytes32 _merkleRoot) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n  pop\n    /* \"contracts/HACHIWhitelist.sol\":129:242  contract HachiWhitelist {... */\n  jump(tag_7)\n    /* \"#utility.yul\":14:198   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_9\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_9:\n  pop\n    /* \"#utility.yul\":176:192   */\n  mload\n  swap2\n    /* \"#utility.yul\":14:198   */\n  swap1\n  pop\n  jump\t// out\ntag_7:\n    /* \"contracts/HACHIWhitelist.sol\":129:242  contract HachiWhitelist {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/HACHIWhitelist.sol\":129:242  contract HachiWhitelist {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x2eb4a7ab\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/HACHIWhitelist.sol\":159:184  bytes32 public merkleRoot */\n    tag_3:\n      tag_4\n      sload(0x00)\n      dup2\n      jump\n    tag_4:\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"contracts/HACHIWhitelist.sol\":159:184  bytes32 public merkleRoot */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n\n    auxdata: 0xa26469706673582212202df63c7331ee483e506cc02f324ce5974f896eb3be310ae4b98c86f4070d708064736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_103": {
									"entryPoint": null,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": 53,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:200:2",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:2",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:103:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:2"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:2"
															},
															"nodeType": "YulIf",
															"src": "105:52:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "166:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "182:9:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "176:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "176:16:2"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:2"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:2",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:2",
														"type": ""
													}
												],
												"src": "14:184:2"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506040516100d93803806100d983398101604081905261002f91610035565b5061004e565b60006020828403121561004757600080fd5b5051919050565b607d8061005c6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632eb4a7ab14602d575b600080fd5b603560005481565b60405190815260200160405180910390f3fea26469706673582212202df63c7331ee483e506cc02f324ce5974f896eb3be310ae4b98c86f4070d708064736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xD9 CODESIZE SUB DUP1 PUSH2 0xD9 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x35 JUMP JUMPDEST POP PUSH2 0x4E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x7D DUP1 PUSH2 0x5C PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x35 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xF6 EXTCODECOPY PUSH20 0x31EE483E506CC02F324CE5974F896EB3BE310AE4 0xB9 DUP13 DUP7 DELEGATECALL SMOD 0xD PUSH17 0x8064736F6C634300080D00330000000000 ",
							"sourceMap": "129:113:1:-:0;;;191:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;129:113;;14:184:2;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:2;;14:184;-1:-1:-1;14:184:2:o;:::-;129:113:1;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@merkleRoot_97": {
									"entryPoint": null,
									"id": 97,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:193:2",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:2",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:76:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "125:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "148:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:2"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:25:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "160:25:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "84:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "95:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "106:4:2",
														"type": ""
													}
												],
												"src": "14:177:2"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c80632eb4a7ab14602d575b600080fd5b603560005481565b60405190815260200160405180910390f3fea26469706673582212202df63c7331ee483e506cc02f324ce5974f896eb3be310ae4b98c86f4070d708064736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2EB4A7AB EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x35 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xF6 EXTCODECOPY PUSH20 0x31EE483E506CC02F324CE5974F896EB3BE310AE4 0xB9 DUP13 DUP7 DELEGATECALL SMOD 0xD PUSH17 0x8064736F6C634300080D00330000000000 ",
							"sourceMap": "129:113:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;159:25;;;;;;;;;160::2;;;148:2;133:18;159:25:1;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "25000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"merkleRoot()": "2261"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 129,
									"end": 242,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 129,
									"end": 242,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 129,
									"end": 242,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 191,
									"end": 240,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 191,
									"end": 240,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 191,
									"end": 240,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 191,
									"end": 240,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "CODESIZE",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 191,
									"end": 240,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 191,
									"end": 240,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 191,
									"end": 240,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 191,
									"end": 240,
									"name": "tag",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 191,
									"end": 240,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 191,
									"end": 240,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 129,
									"end": 242,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 129,
									"end": 242,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 14,
									"end": 198,
									"name": "tag",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 2
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 176,
									"end": 192,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 176,
									"end": 192,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 14,
									"end": 198,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "tag",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 129,
									"end": 242,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 242,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 129,
									"end": 242,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 242,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 242,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 129,
									"end": 242,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 242,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202df63c7331ee483e506cc02f324ce5974f896eb3be310ae4b98c86f4070d708064736f6c634300080d0033",
									".code": [
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH",
											"source": 1,
											"value": "2EB4A7AB"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 242,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 129,
											"end": 242,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 159,
											"end": 184,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 159,
											"end": 184,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 159,
											"end": 184,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 159,
											"end": 184,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 159,
											"end": 184,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 159,
											"end": 184,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 159,
											"end": 184,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 159,
											"end": 184,
											"name": "RETURN",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"merkleRoot()": "2eb4a7ab"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HACHIWhitelist.sol\":\"HachiWhitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aa68fa19422863cc91d23b5896917dbe79175ed47b591148aaeb3e98cb49752\",\"dweb:/ipfs/QmeY64vTRbGhdXcytRKusfJsAfNF4aqr9e1SGBGdCYvW2j\"]},\"contracts/HACHIWhitelist.sol\":{\"keccak256\":\"0x756808a1bc4850ad0e3cdfa2d2d83091e1cd744e573bf848a141a66d0146ff4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65b4f010aa8c238853efefc9457cd761ef5b95b49aed8a6fbf4154c86705770e\",\"dweb:/ipfs/QmWSVLtjmtDKwdFp7cxghXJZUw36kFQNByzua9tSpe7z13\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 97,
								"contract": "contracts/HACHIWhitelist.sol:HachiWhitelist",
								"label": "merkleRoot",
								"offset": 0,
								"slot": "0",
								"type": "t_bytes32"
							}
						],
						"types": {
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"MerkleProof": [
							92
						]
					},
					"id": 93,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "118:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "143:656:0",
								"text": " @dev These functions deal with verification of Merkle Trees proofs.\n The proofs can be generated using the JavaScript library\n https://github.com/miguelmota/merkletreejs[merkletreejs].\n Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value."
							},
							"fullyImplemented": true,
							"id": 92,
							"linearizedBaseContracts": [
								92
							],
							"name": "MerkleProof",
							"nameLocation": "808:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "1281:57:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 16,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 6,
																"src": "1311:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 17,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 10,
																"src": "1318:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 15,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "1298:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 18,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1298:25:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 19,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "1327:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1298:33:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 14,
												"id": 21,
												"nodeType": "Return",
												"src": "1291:40:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "826:323:0",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."
									},
									"id": 23,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1163:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 6,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1196:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "1179:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 4,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1179:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 5,
													"nodeType": "ArrayTypeName",
													"src": "1179:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1219:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "1211:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 7,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1241:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "1233:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 9,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1169:82:0"
									},
									"returnParameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "1275:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 12,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1275:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:6:0"
									},
									"scope": 92,
									"src": "1154:184:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 79,
										"nodeType": "Block",
										"src": "1781:570:0",
										"statements": [
											{
												"assignments": [
													35
												],
												"declarations": [
													{
														"constant": false,
														"id": 35,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "1799:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 79,
														"src": "1791:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 34,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1791:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 37,
												"initialValue": {
													"id": 36,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 29,
													"src": "1814:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1791:27:0"
											},
											{
												"body": {
													"id": 75,
													"nodeType": "Block",
													"src": "1871:445:0",
													"statements": [
														{
															"assignments": [
																50
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 50,
																	"mutability": "mutable",
																	"name": "proofElement",
																	"nameLocation": "1893:12:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 75,
																	"src": "1885:20:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 49,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "1885:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 54,
															"initialValue": {
																"baseExpression": {
																	"id": 51,
																	"name": "proof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 27,
																	"src": "1908:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																"id": 53,
																"indexExpression": {
																	"id": 52,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 39,
																	"src": "1914:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1908:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1885:31:0"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"id": 57,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 55,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "1934:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 56,
																	"name": "proofElement",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 50,
																	"src": "1950:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "1934:28:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 73,
																"nodeType": "Block",
																"src": "2138:168:0",
																"statements": [
																	{
																		"expression": {
																			"id": 71,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 66,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 35,
																				"src": "2234:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 68,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 50,
																						"src": "2264:12:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 69,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 35,
																						"src": "2278:12:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 67,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 91,
																					"src": "2249:14:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 70,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2249:42:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "2234:57:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 72,
																		"nodeType": "ExpressionStatement",
																		"src": "2234:57:0"
																	}
																]
															},
															"id": 74,
															"nodeType": "IfStatement",
															"src": "1930:376:0",
															"trueBody": {
																"id": 65,
																"nodeType": "Block",
																"src": "1964:168:0",
																"statements": [
																	{
																		"expression": {
																			"id": 63,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 58,
																				"name": "computedHash",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 35,
																				"src": "2060:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"arguments": [
																					{
																						"id": 60,
																						"name": "computedHash",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 35,
																						"src": "2090:12:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					},
																					{
																						"id": 61,
																						"name": "proofElement",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 50,
																						"src": "2104:12:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 59,
																					"name": "_efficientHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 91,
																					"src": "2075:14:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																						"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																					}
																				},
																				"id": 62,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2075:42:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "2060:57:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"id": 64,
																		"nodeType": "ExpressionStatement",
																		"src": "2060:57:0"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 42,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 39,
														"src": "1848:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 43,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1852:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 44,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1852:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1848:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 76,
												"initializationExpression": {
													"assignments": [
														39
													],
													"declarations": [
														{
															"constant": false,
															"id": 39,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1841:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 76,
															"src": "1833:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 38,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1833:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 41,
													"initialValue": {
														"hexValue": "30",
														"id": 40,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1845:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1833:13:0"
												},
												"loopExpression": {
													"expression": {
														"id": 47,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1866:3:0",
														"subExpression": {
															"id": 46,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "1866:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 48,
													"nodeType": "ExpressionStatement",
													"src": "1866:3:0"
												},
												"nodeType": "ForStatement",
												"src": "1828:488:0"
											},
											{
												"expression": {
													"id": 77,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 35,
													"src": "2332:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 33,
												"id": 78,
												"nodeType": "Return",
												"src": "2325:19:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "1344:340:0",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"
									},
									"id": 80,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "1698:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1728:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "1711:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 25,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1711:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 26,
													"nodeType": "ArrayTypeName",
													"src": "1711:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1743:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "1735:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 28,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1735:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1710:38:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "1772:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 31,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1772:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1771:9:0"
									},
									"scope": 92,
									"src": "1689:662:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2440:135:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2459:110:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2480:4:0",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "2486:1:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2473:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "2473:15:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2473:15:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2508:4:0",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "2514:1:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2501:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "2501:15:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2501:15:0"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2529:30:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2548:4:0",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2554:4:0",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "2538:9:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "2538:21:0"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2529:5:0"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 82,
														"isOffset": false,
														"isSlot": false,
														"src": "2486:1:0",
														"valueSize": 1
													},
													{
														"declaration": 84,
														"isOffset": false,
														"isSlot": false,
														"src": "2514:1:0",
														"valueSize": 1
													},
													{
														"declaration": 87,
														"isOffset": false,
														"isSlot": false,
														"src": "2529:5:0",
														"valueSize": 1
													}
												],
												"id": 89,
												"nodeType": "InlineAssembly",
												"src": "2450:119:0"
											}
										]
									},
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_efficientHash",
									"nameLocation": "2366:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2389:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2381:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 81,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2381:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2400:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2392:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 83,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2392:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2380:22:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2425:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 86,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2424:15:0"
									},
									"scope": 92,
									"src": "2357:218:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 93,
							"src": "800:1777:0",
							"usedErrors": []
						}
					],
					"src": "118:2460:0"
				},
				"id": 0
			},
			"contracts/HACHIWhitelist.sol": {
				"ast": {
					"absolutePath": "contracts/HACHIWhitelist.sol",
					"exportedSymbols": {
						"HachiWhitelist": [
							104
						],
						"MerkleProof": [
							92
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 94,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 95,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 93,
							"src": "59:68:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "HachiWhitelist",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104
							],
							"name": "HachiWhitelist",
							"nameLocation": "138:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "2eb4a7ab",
									"id": 97,
									"mutability": "mutable",
									"name": "merkleRoot",
									"nameLocation": "174:10:1",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "159:25:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 96,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "159:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "224:16:1",
										"statements": []
									},
									"id": 103,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "211:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "203:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 98,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "203:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "202:21:1"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "224:0:1"
									},
									"scope": 104,
									"src": "191:49:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 105,
							"src": "129:113:1",
							"usedErrors": []
						}
					],
					"src": "33:209:1"
				},
				"id": 1
			}
		}
	}
}