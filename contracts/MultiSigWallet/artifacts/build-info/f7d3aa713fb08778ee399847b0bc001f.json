{
	"id": "f7d3aa713fb08778ee399847b0bc001f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.10",
	"solcLongVersion": "0.8.10+commit.fc410830",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/MultiSigWallet/IForwarder.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface IForwarder is IERC165 {\n  /**\n   * Sets the autoflush721 parameter.\n   *\n   * @param autoFlush whether to autoflush erc721 tokens\n   */\n  function setAutoFlush721(bool autoFlush) external;\n\n  /**\n   * Sets the autoflush1155 parameter.\n   *\n   * @param autoFlush whether to autoflush erc1155 tokens\n   */\n  function setAutoFlush1155(bool autoFlush) external;\n\n  /**\n   * Execute a token transfer of the full balance from the forwarder token to the parent address\n   *\n   * @param tokenContractAddress the address of the erc20 token contract\n   */\n  function flushTokens(address tokenContractAddress) external;\n\n  /**\n   * Execute a nft transfer from the forwarder to the parent address\n   *\n   * @param tokenContractAddress the address of the ERC721 NFT contract\n   * @param tokenId The token id of the nft\n   */\n  function flushERC721Token(address tokenContractAddress, uint256 tokenId)\n    external;\n\n  /**\n   * Execute a nft transfer from the forwarder to the parent address.\n   *\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\n   * @param tokenId The token id of the nft\n   */\n  function flushERC1155Tokens(address tokenContractAddress, uint256 tokenId)\n    external;\n\n  /**\n   * Execute a batch nft transfer from the forwarder to the parent address.\n   *\n   * @param tokenContractAddress the address of the ERC1155 NFT contract\n   * @param tokenIds The token ids of the nfts\n   */\n  function batchFlushERC1155Tokens(\n    address tokenContractAddress,\n    uint256[] calldata tokenIds\n  ) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/MultiSigWallet/IForwarder.sol": {
				"IForwarder": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "tokenIds",
									"type": "uint256[]"
								}
							],
							"name": "batchFlushERC1155Tokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flushERC1155Tokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenContractAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flushERC721Token",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenContractAddress",
									"type": "address"
								}
							],
							"name": "flushTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "autoFlush",
									"type": "bool"
								}
							],
							"name": "setAutoFlush1155",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "autoFlush",
									"type": "bool"
								}
							],
							"name": "setAutoFlush721",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"batchFlushERC1155Tokens(address,uint256[])": {
								"params": {
									"tokenContractAddress": "the address of the ERC1155 NFT contract",
									"tokenIds": "The token ids of the nfts"
								}
							},
							"flushERC1155Tokens(address,uint256)": {
								"params": {
									"tokenContractAddress": "the address of the ERC1155 NFT contract",
									"tokenId": "The token id of the nft"
								}
							},
							"flushERC721Token(address,uint256)": {
								"params": {
									"tokenContractAddress": "the address of the ERC721 NFT contract",
									"tokenId": "The token id of the nft"
								}
							},
							"flushTokens(address)": {
								"params": {
									"tokenContractAddress": "the address of the erc20 token contract"
								}
							},
							"setAutoFlush1155(bool)": {
								"params": {
									"autoFlush": "whether to autoflush erc1155 tokens"
								}
							},
							"setAutoFlush721(bool)": {
								"params": {
									"autoFlush": "whether to autoflush erc721 tokens"
								}
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"batchFlushERC1155Tokens(address,uint256[])": "c6a2dd24",
							"flushERC1155Tokens(address,uint256)": "8972c17c",
							"flushERC721Token(address,uint256)": "159e44d7",
							"flushTokens(address)": "3ef13367",
							"setAutoFlush1155(bool)": "8acc01be",
							"setAutoFlush721(bool)": "c59f9f19",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchFlushERC1155Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC1155Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flushERC721Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"flushTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoFlush\",\"type\":\"bool\"}],\"name\":\"setAutoFlush721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchFlushERC1155Tokens(address,uint256[])\":{\"params\":{\"tokenContractAddress\":\"the address of the ERC1155 NFT contract\",\"tokenIds\":\"The token ids of the nfts\"}},\"flushERC1155Tokens(address,uint256)\":{\"params\":{\"tokenContractAddress\":\"the address of the ERC1155 NFT contract\",\"tokenId\":\"The token id of the nft\"}},\"flushERC721Token(address,uint256)\":{\"params\":{\"tokenContractAddress\":\"the address of the ERC721 NFT contract\",\"tokenId\":\"The token id of the nft\"}},\"flushTokens(address)\":{\"params\":{\"tokenContractAddress\":\"the address of the erc20 token contract\"}},\"setAutoFlush1155(bool)\":{\"params\":{\"autoFlush\":\"whether to autoflush erc1155 tokens\"}},\"setAutoFlush721(bool)\":{\"params\":{\"autoFlush\":\"whether to autoflush erc721 tokens\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchFlushERC1155Tokens(address,uint256[])\":{\"notice\":\"Execute a batch nft transfer from the forwarder to the parent address.\"},\"flushERC1155Tokens(address,uint256)\":{\"notice\":\"Execute a nft transfer from the forwarder to the parent address.\"},\"flushERC721Token(address,uint256)\":{\"notice\":\"Execute a nft transfer from the forwarder to the parent address\"},\"flushTokens(address)\":{\"notice\":\"Execute a token transfer of the full balance from the forwarder token to the parent address\"},\"setAutoFlush1155(bool)\":{\"notice\":\"Sets the autoflush1155 parameter.\"},\"setAutoFlush721(bool)\":{\"notice\":\"Sets the autoflush721 parameter.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSigWallet/IForwarder.sol\":\"IForwarder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/MultiSigWallet/IForwarder.sol\":{\"keccak256\":\"0x8cfa9363d477db77f13ec930d478130620f6b4d18e32ae3246ed14949797855a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://1f371c46947e838a9c78c5065fe16c87cfc5ad1e841060ca2e3cc7e8b36a6470\",\"dweb:/ipfs/QmQvY5AfwtdGUGJU3ZxwHzj3So9if2uNscwi6HUBAN11y4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"batchFlushERC1155Tokens(address,uint256[])": {
								"notice": "Execute a batch nft transfer from the forwarder to the parent address."
							},
							"flushERC1155Tokens(address,uint256)": {
								"notice": "Execute a nft transfer from the forwarder to the parent address."
							},
							"flushERC721Token(address,uint256)": {
								"notice": "Execute a nft transfer from the forwarder to the parent address"
							},
							"flushTokens(address)": {
								"notice": "Execute a token transfer of the full balance from the forwarder token to the parent address"
							},
							"setAutoFlush1155(bool)": {
								"notice": "Sets the autoflush1155 parameter."
							},
							"setAutoFlush721(bool)": {
								"notice": "Sets the autoflush721 parameter."
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						]
					},
					"id": 12,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:0",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 11,
							"linearizedBaseContracts": [
								11
							],
							"name": "IERC165",
							"nameLocation": "415:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:0",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 10,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 10,
												"src": "801:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 4,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:0"
									},
									"returnParameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 10,
												"src": "844:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 7,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:0"
									},
									"scope": 11,
									"src": "774:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 12,
							"src": "405:447:0",
							"usedErrors": []
						}
					],
					"src": "100:753:0"
				},
				"id": 0
			},
			"contracts/MultiSigWallet/IForwarder.sol": {
				"ast": {
					"absolutePath": "contracts/MultiSigWallet/IForwarder.sol",
					"exportedSymbols": {
						"IERC165": [
							11
						],
						"IForwarder": [
							60
						]
					},
					"id": 61,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 13,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"id": 14,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 61,
							"sourceUnit": 12,
							"src": "64:65:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 15,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 11,
										"src": "155:7:1"
									},
									"id": 16,
									"nodeType": "InheritanceSpecifier",
									"src": "155:7:1"
								}
							],
							"canonicalName": "IForwarder",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 60,
							"linearizedBaseContracts": [
								60,
								11
							],
							"name": "IForwarder",
							"nameLocation": "141:10:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "167:109:1",
										"text": " Sets the autoflush721 parameter.\n @param autoFlush whether to autoflush erc721 tokens"
									},
									"functionSelector": "c59f9f19",
									"id": 22,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setAutoFlush721",
									"nameLocation": "288:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "autoFlush",
												"nameLocation": "309:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "304:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 18,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "304:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "303:16:1"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "328:0:1"
									},
									"scope": 60,
									"src": "279:50:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "333:111:1",
										"text": " Sets the autoflush1155 parameter.\n @param autoFlush whether to autoflush erc1155 tokens"
									},
									"functionSelector": "8acc01be",
									"id": 28,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setAutoFlush1155",
									"nameLocation": "456:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "autoFlush",
												"nameLocation": "478:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "473:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 24,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "473:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "472:16:1"
									},
									"returnParameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "497:0:1"
									},
									"scope": 60,
									"src": "447:51:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "502:184:1",
										"text": " Execute a token transfer of the full balance from the forwarder token to the parent address\n @param tokenContractAddress the address of the erc20 token contract"
									},
									"functionSelector": "3ef13367",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flushTokens",
									"nameLocation": "698:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "tokenContractAddress",
												"nameLocation": "718:20:1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "710:28:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 30,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "710:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "709:30:1"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "748:0:1"
									},
									"scope": 60,
									"src": "689:60:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "753:199:1",
										"text": " Execute a nft transfer from the forwarder to the parent address\n @param tokenContractAddress the address of the ERC721 NFT contract\n @param tokenId The token id of the nft"
									},
									"functionSelector": "159e44d7",
									"id": 42,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flushERC721Token",
									"nameLocation": "964:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "tokenContractAddress",
												"nameLocation": "989:20:1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "981:28:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "981:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1019:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "1011:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "980:47:1"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:1"
									},
									"scope": 60,
									"src": "955:86:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "1045:201:1",
										"text": " Execute a nft transfer from the forwarder to the parent address.\n @param tokenContractAddress the address of the ERC1155 NFT contract\n @param tokenId The token id of the nft"
									},
									"functionSelector": "8972c17c",
									"id": 50,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flushERC1155Tokens",
									"nameLocation": "1258:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "tokenContractAddress",
												"nameLocation": "1285:20:1",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1277:28:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1277:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1315:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1307:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 46,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1307:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1276:47:1"
									},
									"returnParameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1336:0:1"
									},
									"scope": 60,
									"src": "1249:88:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1341:210:1",
										"text": " Execute a batch nft transfer from the forwarder to the parent address.\n @param tokenContractAddress the address of the ERC1155 NFT contract\n @param tokenIds The token ids of the nfts"
									},
									"functionSelector": "c6a2dd24",
									"id": 59,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchFlushERC1155Tokens",
									"nameLocation": "1563:23:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "tokenContractAddress",
												"nameLocation": "1600:20:1",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "1592:28:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1592:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "tokenIds",
												"nameLocation": "1645:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "1626:27:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 54,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1626:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 55,
													"nodeType": "ArrayTypeName",
													"src": "1626:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1586:71:1"
									},
									"returnParameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1666:0:1"
									},
									"scope": 60,
									"src": "1554:113:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 61,
							"src": "131:1538:1",
							"usedErrors": []
						}
					],
					"src": "39:1631:1"
				},
				"id": 1
			}
		}
	}
}